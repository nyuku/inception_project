events {
	# worker_connections 768;
}

http {
	include			/etc/nginx/mime.types;
	default_type	application/octet-stream;

	server {
		listen 443 ssl;

		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_certificate /etc/nginx/ssl/inception.crt;
		ssl_certificate_key /etc/nginx/ssl/inception.key;

		# root /var/www/wordpress;
		root /var/www/html;
		index index.html;
		# echo "<h1>Welcome to NGINX</h1>" > /var/www/html/index.html

		server_name localhost;
    	index index.php index.html index.htm;

		location / {
			# try_files $uri $uri/ =404;
			try_files $uri $uri/ /index.php$is_args$args;
		}
		
		# This snippet explicitly defines all necessary FastCGI parameters directly within the location block. It provides clear visibility into how PHP requests are handled.
		# location ~ \.php$ {
		# 	fastcgi_split_path_info ^(.+\.php)(/.+)$; # This is a regular expression that captures the PHP file and the rest of the URI. The $fastcgi_script_name variable is then set to the PHP file, and the $fastcgi_path_info variable is set to the rest of the URI.
		# 	fastcgi_pass wordpress:9000; # This directive sets the address and port of the FastCGI server. In this case, the FastCGI server is running in a separate container named wordpress.
		# 	fastcgi_index index.php; # This directive sets the index file that the FastCGI server should use when a directory is requested.
		# 	include fastcgi_params; # This directive includes the fastcgi_params file, which sets the FastCGI parameters. The fastcgi_params file is provided by the official PHP Docker image.
		# 	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # This directive sets the SCRIPT_FILENAME parameter to the full path of the PHP file. This is necessary because the FastCGI server needs to know the full path to the PHP file in order to execute it.
		# 	fastcgi_param SCRIPT_NAME $fastcgi_script_name; # This directive sets the SCRIPT_NAME parameter to the PHP file. This is necessary because the FastCGI server needs to know the name of the PHP file in order to execute it.
		# }
	}
}

# Fichier de configuration principal de NGINX

# worker_processes 1;

# events {
#     worker_connections 1024;
# }

# http 
# {
#     # Configuration du serveur principal
#     # server {
#     #     # Configuration SSL/TLS
#     #     listen 443 ssl;
#     #     ssl_protocols TLSv1.2 TLSv1.3;
#     #     ssl_certificate /etc/nginx/ssl/inception.crt;
#     #     ssl_certificate_key /etc/nginx/ssl/inception.key;

#     #     # Configuration de la racine, de l'index et du nom de serveur
#     #     root /var/www/html;
#     #     server_name localhost; # Nom du serveur
#     #     index index.php index.html index.htm; # Page par défaut à afficher

#     #     # Gestion de la localisation des erreurs 404
#     #     location / {
#     #         try_files $uri $uri/ =404;
#     #     }
# 	server 
# 	{
# 		listen 443 ssl;
# 		ssl_protocols TLSv1.2 TLSv1.3;
# 		ssl_certificate /etc/nginx/ssl/inception.crt;
# 		ssl_certificate_key /etc/nginx/ssl/inception.key;

# 		root /var/www/html;
# 		index index.html;

# 		location / {
# 						try_files $uri $uri/ =404;
# 					}
	

#         # Configuration pour gérer les requêtes PHP
# 		# ! sur le container de WordPress et non de NGINX. 
#         location ~ \.php$ 
# 		{
# 			root /usr/share/nginx/html; # Remplacez par le répertoire de vos fichiers statiques
#     		index index.html; # Affiche un fichier index.html
			
# 			include snippets/fastcgi-php.conf;
# 			# !!!fastcgi_pass wordpress:9000; 
# 			# provisoirement enlever car pas encore wordpress

# 			# Redirige les requêtes PHP vers le conteneur WordPress
# 			# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
# 			# include fastcgi_params;
#        	}
# }
# }

# #salut c'est bibi
# server {
# 							#SSL/TLS Configurations
# 							listen 443 ssl;
# 							ssl_protocols TLSv1.2 TLSv1.3;
# 							ssl_certificate /etc/nginx/ssl/inception.crt;
# 							ssl_certificate_key /etc/nginx/ssl/inception.key;

# 							#root and index and server_name
# 							root /var/www/html;
# 							server_name login.42.fr; #local host
# 							index index.php index.html index.htm;# page a affficher
# 		}
# #Gestion 404 si erreur
# location / 			{
# 						try_files $uri $uri/ =404;
# 					}
# #  comment gérer le PHP à NGINX et lui indiquer où il faut qu’il renvoie notre code php. 
# location ~ \.php$	{
# 						include snippets/fastcgi-php.conf;
# 						fastcgi_pass wordpress:9000;				# Comment renvoyer les requetes php sur le port 9000
# 					}
					
					
				
					